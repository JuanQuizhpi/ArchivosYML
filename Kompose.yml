---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
    kompose.version: 1.34.0 (cbf2835db)
  labels:
    io.kompose.service: admin
  name: admin
spec:
  ports:
    - name: "5050"
      port: 5050
      targetPort: 80
  selector:
    io.kompose.service: admin

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
    kompose.version: 1.34.0 (cbf2835db)
  labels:
    io.kompose.service: jaeger
  name: jaeger
spec:
  ports:
    - name: "6831"
      port: 6831
      protocol: UDP
      targetPort: 6831
    - name: "16686"
      port: 16686
      targetPort: 16686
  selector:
    io.kompose.service: jaeger

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
    kompose.version: 1.34.0 (cbf2835db)
  labels:
    io.kompose.service: postgres
  name: postgres
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    io.kompose.service: postgres

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
    kompose.version: 1.34.0 (cbf2835db)
  labels:
    io.kompose.service: srvwildfly
  name: srvwildfly
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
    - name: "9990"
      port: 9990
      targetPort: 9990
  selector:
    io.kompose.service: srvwildfly

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
    kompose.version: 1.34.0 (cbf2835db)
  labels:
    io.kompose.service: swagger
  name: swagger
spec:
  ports:
    - name: "8083"
      port: 8083
      targetPort: 8080
  selector:
    io.kompose.service: swagger

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
    kompose.version: 1.34.0 (cbf2835db)
  labels:
    io.kompose.service: admin
  name: admin
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: admin
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
        kompose.version: 1.34.0 (cbf2835db)
      labels:
        io.kompose.service: admin
    spec:
      containers:
        - env:
            - name: PGADMIN_DEFAULT_EMAIL
              value: ups123@ups.com.ec
            - name: PGADMIN_DEFAULT_PASSWORD
              value: ups123
          image: dpage/pgadmin4
          name: admin
          ports:
            - containerPort: 80
              protocol: TCP
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
    kompose.version: 1.34.0 (cbf2835db)
  labels:
    io.kompose.service: jaeger
  name: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: jaeger
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
        kompose.version: 1.34.0 (cbf2835db)
      labels:
        io.kompose.service: jaeger
    spec:
      containers:
        - image: jaegertracing/all-in-one:1.16.0
          name: jaeger
          ports:
            - containerPort: 6831
              protocol: UDP
            - containerPort: 16686
              protocol: TCP
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
    kompose.version: 1.34.0 (cbf2835db)
  labels:
    io.kompose.service: postgres
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: postgres
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
        kompose.version: 1.34.0 (cbf2835db)
      labels:
        io.kompose.service: postgres
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              value: universidades
            - name: POSTGRES_PASSWORD
              value: root
            - name: POSTGRES_USER
              value: root
          image: postgres
          name: postgres
          ports:
            - containerPort: 5432
              protocol: TCP
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
    kompose.version: 1.34.0 (cbf2835db)
  labels:
    io.kompose.service: srvwildfly
  name: srvwildfly
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: srvwildfly
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
        kompose.version: 1.34.0 (cbf2835db)
      labels:
        io.kompose.service: srvwildfly
    spec:
      containers:
        - env:
            - name: DB_HOST
              value: postgres
            - name: DB_NAME
              value: universidades
            - name: DB_PASSWORD
              value: root
            - name: DB_PORT
              value: "5432"
            - name: DB_USER
              value: root
            - name: JAEGER_AGENT_HOST
              value: jaeger
            - name: JAEGER_AGENT_PORT
              value: "6831"
            - name: JAEGER_SAMPLER_PARAM
              value: "1"
            - name: JAEGER_SAMPLER_TYPE
              value: const
          image: juanqqq/pruebamicroservice
          name: srvwildfly
          ports:
            - containerPort: 8080
              protocol: TCP
            - containerPort: 9990
              protocol: TCP
      hostname: srvwildfly
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
    kompose.version: 1.34.0 (cbf2835db)
  labels:
    io.kompose.service: swagger
  name: swagger
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: swagger
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: C:\Program Files\Kompose\kompose.exe convert -f docker-compose.yml -o kompose.yml
        kompose.version: 1.34.0 (cbf2835db)
      labels:
        io.kompose.service: swagger
    spec:
      containers:
        - env:
            - name: SWAGGER_JSON
              value: /restful/openapi.yaml
          image: swaggerapi/swagger-ui
          name: swagger
          ports:
            - containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: /restful/openapi.yaml
              name: swagger-cm0
              subPath: openapi.yaml
      restartPolicy: Always
      volumes:
        - configMap:
            items:
              - key: openapi.yaml
                path: openapi.yaml
            name: swagger-cm0
          name: swagger-cm0

---
apiVersion: v1
data:
  openapi.yaml: |-
    openapi: 3.0.0
    info:
      title: UniversidadServices API
      version: 1.0.0
      description: API para la gesti√≥n de Universidades
    servers:
      - url: http://localhost:8080/demo64DockC/rs
        description: Local Server

    paths:
      /universidades:
        post:
          summary: Crear un nuevo universidad
          operationId: guardarUniversidad
          requestBody:
            description: Datos de la universidad a crear
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Universidad'
          responses:
            '201':
              description: Universidad creado exitosamente
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorMessage'
            '500':
              description: Error interno del servidor
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorMessage'
        put:
          summary: Actualizar un universidad existente
          operationId: actualizarUniversidad
          requestBody:
            description: Datos de la Universidad a actualizar
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Universidad'
          responses:
            '200':
              description: Universidad actualizado exitosamente
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Universidad'
            '404':
              description: Universidad no encontrada
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorMessage'
        delete:
          summary: Eliminar una universidad
          operationId: eliminarUniversidad
          parameters:
            - name: id
              in: query
              required: true
              schema:
                type: string
              description: Id del Universidad a eliminar
          responses:
            '200':
              description: Universidad eliminado exitosamente
              content:
                application/json:
                  schema:
                    type: string
                    example: "Universidad Eliminado"
            '500':
              description: Error interno del servidor
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorMessage'

        get:
          summary: Obtener universidad por id
          operationId: getUniversidadPorID
          parameters:
            - in: query
              name: id
              required: true
              schema:
                type: string
              description: id de universidad a obtener
          responses:
            '200':
              description: universidad encontrado
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Universidad'
            '404':
              description: universidad no encontrado
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorMessage'
      /universidades/list:
        get:
          summary: Obtener la lista de universidades
          operationId: getUniversidades
          responses:
            '200':
              description: Lista de universidades
              content:
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Universidad'
            '404':
              description: No se registran universidades
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorMessage'

    components:
      schemas:
        Carro:
          type: object
          properties:
            id:
              type: string
            nombre:
              type: string
            sede:
              type: string
        ErrorMessage:
          type: object
          properties:
            codigo:
              type: integer
              example: 1
            mensaje:
              type: string
              example: ok
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: swagger
  name: swagger-cm0

